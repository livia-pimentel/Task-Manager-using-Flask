name: Estudo de Caso HdB

on:
  push:
    branches: ["dev"]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build the Docker image
        run: docker build -t $(date +%s) .

  test:
    needs: build
    name: Testes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: | 
          python -m pip install pytest 
          python -m pip install Flask-Testing SQLAlchemy flask_sqlalchemy flask_login flask_bcrypt flask_wtf
      - name: Run tests
        run: PYTHONPATH=$PYTHONPATH:. pytest

  bandit:
    needs: build
    name: Bandit (SAST)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Bandit Analysis
        uses: PyCQA/bandit-action@v1
  
  dependency_check:
    needs: build
    name: Dependency-Check (SAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: python -m pip install -r requirements.txt
      - name: Check dependency
        uses: dependency-check/Dependency-Check_Action@main
        id: Dependency-Check
        with:
          project: "Task-Manager-using-Flask"
          path: "."
          format: "HTML"
          out: "reports"
          args: >
            --scan "**/*.py"
            --scan "requirements.txt"
            --failOnCVSS 7
            --enableRetired
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check report
          path: ${{github.workspace}}/reports
  
  zap:
    needs: 
      - bandit
      - dependency_check
    name: ZAP Scanning Report (DAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t task-image .
      - name: Run application
        run: |
          docker run -d -p 5000:5000 --name task-manager task-image
          sleep 10
      - name: Zap Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: "http://localhost:5000"

  loki:
    needs: zap
    name: Loki Setup
    runs-on: ubuntu-latest
    services:
      loki:
        image: grafana/loki:latest
        ports:
          - 3100:3100
    steps:
      - name: Configure Loki logging
        run: |
          docker run -d -v /var/log:/var/log grafana/promtail:latest -config.file=/etc/promtail/config.yml
      - name: View logs with Loki
        run: echo "Loki logs available at localhost:3100"

  grafana:
    needs: loki
    name: Grafana Setup
    runs-on: ubuntu-latest
    services:
      grafana:
        image: grafana/grafana:latest
        ports:
          - 3000:3000
    steps:
      - name: Access Grafana Dashboard
        run: echo "Grafana running at http://localhost:3000"
      - name: Configure Grafana
        run: echo "Configure Loki as a data source in Grafana."

  pull_request_automatic:
    needs: grafana
    name: Deploy Stage para Simulação
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run the Action
        uses: devops-infra/action-pull-request@v0.5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          title: Create pull request automatic
          target_branch: staging
          assignee: ${{ github.actor }}
          label: automatic
          get_diff: true
